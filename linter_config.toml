# Files to exclude from linting
exclude = [""]
# Which functions are considered to abort the execution of the script
# Encountering these functions disables some rules, eg. unasserted_arguments,
# missing_returns, and unasserted_returns
#
# Only add functions to this list if the abort is immediate and unconditional
abort_functions = [
    "qa.abort",
]

[rules.unasserted_arguments]
# Severity of the rule. Can be "warn" or "error"
severity = "warn"
# Whether to require type assertions for the `self` argument
assert_self = false
# Whether to require arguments to be asserted by reference (i.e. `@arname`)
require_ref = true
# List of exceptions to the rule
exceptions = ["_"]

[rules.unasserted_returns]
# Severity of the rule. Can be "warn" or "error"
severity = "warn"
# Whether to require type assertions for self returns
assert_self = false
# Whether to require returns to be asserted by reference (i.e. `@varname`)
require_ref = true

[rules.missing_returns]
# Severity of the rule. Can be "warn" or "error"
severity = "warn"

[rules.reserved_identifiers]
# Severity of the rule. Can be "warn" or "error"
severity = "error"
# List of reserved identifiers
reserved = [
    "string",
    "number",
    "map",
    "list",
    "funcRef",
]

# There is never a good reason to disable this rule, as it only catched syntax 
# errors that would prevent the script from running anyway
[rules.bad_syntax]
severity = "error"
